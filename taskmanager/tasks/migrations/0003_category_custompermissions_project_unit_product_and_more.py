# Generated by Django 5.1 on 2025-06-14 04:46

import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tasks', '0002_alter_task_managers_task_is_deleted'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('filtered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('view_dashboard', 'Can view dashboard'), ('view_balance_sheet', 'Can view balance sheet'), ('view_store', 'Can view store'), ('view_reports', 'Can view reports'), ('view_inventory', 'Can view inventory')],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('productname', models.CharField(max_length=255, unique=True)),
                ('product_size', models.CharField(max_length=255)),
                ('product_quantity', models.CharField(blank=True, max_length=255, null=True)),
                ('unit', models.CharField(default='Nos', max_length=255)),
                ('weight', models.FloatField(blank=True, default=0, max_length=255, null=True)),
                ('product_status', models.BooleanField(default=False)),
                ('pro_img', models.ImageField(blank=True, null=True, upload_to='uploaded/products/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tasks.category')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('filtered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Store_Issue_Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tasks.project')),
            ],
        ),
        migrations.CreateModel(
            name='Store_Issue_Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tasks.product')),
                ('store_issue_note', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tasks.store_issue_note')),
            ],
        ),
        migrations.AddField(
            model_name='store_issue_note',
            name='products',
            field=models.ManyToManyField(through='tasks.Store_Issue_Product', to='tasks.product'),
        ),
        migrations.CreateModel(
            name='Store_Issue_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('issue', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tasks.project')),
            ],
        ),
        migrations.AddField(
            model_name='store_issue_note',
            name='request',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='tasks.store_issue_request'),
        ),
        migrations.CreateModel(
            name='Store_Issue_Request_Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tasks.product')),
                ('store_issue_request', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='tasks.store_issue_request')),
            ],
        ),
        migrations.AddField(
            model_name='store_issue_request',
            name='products',
            field=models.ManyToManyField(through='tasks.Store_Issue_Request_Product', to='tasks.product'),
        ),
    ]
